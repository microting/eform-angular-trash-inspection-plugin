name: .NET Docker

on:
  push:
    tags:
      - 'v*.*.*'
    paths-ignore:
    - '**.md'
    - '.github/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        path: eform-angular-trashinspection-plugin
    - uses: getong/mariadb-action@v1.1
      with:
        host port: 3306 # Optional, default value is 3306. The port of host
        container port: 3306 # Optional, default value is 3306. The port of container
        character set server: 'utf8' # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
        collation server: 'utf8_general_ci' # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
        mariadb version: '10.4.10' # Optional, default value is "latest". The version of the MariaDB
        mysql database: 'some_test' # Optional, default value is "test". The specified database which will be create
        mysql root password: 'secretpassword' # Required if "mysql user" is empty, default is empty. The root superuser password
        mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
        mysql password: 'passwordtoo' # Required if "mysql user" exists. The password for the "mysql user"
    - name: Sleep 15 seconds
      run: sleep 15
    - uses: getong/rabbitmq-action@v1.2
      with:
        rabbitmq version: '3.8.2-management-alpine'
        host port: 5672
        rabbitmq user: 'admin'
        rabbitmq password: 'password'
        rabbitmq vhost: 'vhost_name'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.16.2'
    - name: Extract branch name
      id: extract_branch
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
    - name: 'Preparing Frontend checkout'
      uses: actions/checkout@v2
      with:
        repository: microting/eform-angular-frontend
        ref: ${{ github.base_ref }}
        path: eform-angular-frontend
    - name: Install dependencies
      run: dotnet restore eform-angular-trashinspection-plugin/eFormAPI/Plugins/TrashInspection.Pn/TrashInspection.Pn.sln
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -d "v" -f 2)
    - name: Get the frontend version
      id: get_frontend_version
      run: echo ::set-output name=FRONTENDVERSION::$(cd eform-angular-frontend && git describe --abbrev=0 --tags | cut -d "v" -f 2)
    - name: Build
      run: dotnet build eform-angular-trashinspection-plugin/eFormAPI/Plugins/TrashInspection.Pn/TrashInspection.Pn.sln
    - name: Unit Tests
      run: dotnet test --no-restore -c Release -v n eform-angular-trashinspection-plugin/eFormAPI/Plugins/TrashInspection.Pn/TrashInspection.Pn.Test/TrashInspection.Pn.Test.csproj
    - name: Copy dependencies
      run: |
        cp -av eform-angular-trashinspection-plugin/eform-client/src/app/plugins/modules/trash-inspection-pn eform-angular-frontend/eform-client/src/app/plugins/modules/trash-inspection-pn
        cp -av eform-angular-trashinspection-plugin/eform-client/e2e/Tests/trash-inspections-settings eform-angular-frontend/eform-client/e2e/Tests/trash-inspections-settings
        cp -av eform-angular-trashinspection-plugin/eform-client/e2e/Tests/trash-inspection-general eform-angular-frontend/eform-client/e2e/Tests/trash-inspection-general
        cp -av eform-angular-trashinspection-plugin/eform-client/e2e/Page\ objects/trash-inspection eform-angular-frontend/eform-client/e2e/Page\ objects/trash-inspection
        cp -av eform-angular-trashinspection-plugin/eform-client/wdio-headless-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-headless-plugin-step2.conf.js
        cp -av eform-angular-trashinspection-plugin/eform-client/wdio-plugin-step2.conf.js eform-angular-frontend/eform-client/wdio-plugin-step2.conf.js
        mkdir -p eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins
        cp -av eform-angular-trashinspection-plugin/eFormAPI/eFormAPI.Web/Plugins/TrashInspection eform-angular-frontend/eFormAPI/eFormAPI.Web/Plugins/TrashInspection
        cd eform-angular-frontend/eform-client && ../../eform-angular-trashinspection-plugin/testinginstallpn.sh
    - name: Build frontend
      run: dotnet build eform-angular-frontend/eFormAPI/eFormAPI.sln > dotnet_log 2>&1 &
    - name: NPM install
      run: cd eform-angular-frontend/eform-client && npm install
    - name: NPM start
      run: cd eform-angular-frontend/eform-client && npm start > npm_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Dotnet run
      run: dotnet run --project eform-angular-frontend/eFormAPI/eFormAPI.Web/eFormAPI.Web.csproj > dotnet_log 2>&1 &
    - name: Sleep 75 seconds
      run: sleep 75
    - name: Configuration testing
      run: cd eform-angular-frontend/eform-client && npm run testheadless
    - name: Plugin testing
      run: cd eform-angular-frontend/eform-client && npm run testheadlessplugin
    - name: The job has failed
      if: ${{ failure() }}
      run: |
        cat dotnet_log
        cat eform-angular-frontend/eform-client/npm_log
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Copy frontendfiles
      run: cp eform-angular-trashinspection-plugin/Dockerfile .
    - name: Build the tagged Docker image
      run: docker build . -t microtingas/trashinspection:latest -t microtingas/trashinspection:${{ steps.get_frontend_version.outputs.FRONTENDVERSION }} --build-arg GITVERSION=${{ steps.get_frontend_version.outputs.FRONTENDVERSION }} --build-arg PLUGINVERSION=${{ steps.get_version.outputs.VERSION }}
    - name: Push the tagged Docker image
      run: docker push microtingas/trashinspection:${{ steps.get_frontend_version.outputs.FRONTENDVERSION }}
    - name: Push the latest Docker image
      run: docker push microtingas/trashinspection:latest
